
# Don't bother including this in custom configuration files. When imported to a dictionary in the pywhiten object,
# it will populate this field with some information as to where it got the configuration from for debugging purposes
title = "pywhiten default configuration"

[input]
    # input data axis unit. Uncertainties are assumed to be in this unit. If you are inputting data in magnitude or
    # millimagnitude, enter "mag" or "mmag". It will be converted to a linear unit for analysis, however may be
    # output in mmag by setting the output.plot_output_in_mmag or output.data_output_in_mmag flag to true.
    flux_unit = "unknown"
    # input time axis unit.
    time_unit = "unknown"
    # if the time axis is relative to some value (e.g. JD-2457000, for TESS data), set it here and it'll
    # be corrected (added to all time axis values)
    input_t0 = 0
    # subtracted from the time axis prior to analysis. Useful if you want to measure your phases
    # with respect to some time value
    measurement_t0 = 0
    # set this to subtract the mean of the light curve when data is loaded. If the mean of the light curve isn't
    # zero or very close to it, then there will be a large apparant amplitude component near 0 frequency which will
    # probably cause problems.
    subtract_mean = true


[output]
    # prints messages during runtime indicating the pre-whitening progress
    print_runtime_messages = true

    # if you'd like output plots in mmag, set this to true. This is currently untested and probably doesn't work.
    plot_output_in_mmag = false
    # if you'd like output data in mmag, set this to true (incl reported frequencies
    data_output_in_mmag = false
    # the reference flux corresponding to the reference magnitude, used for conversions from magnitude to flux and
    # vice-versa. Due to the nature of the magnitude system, it requires a reference point. Typically, this has been the
    # star Vega, however magnitude systems are highly nonstandard and this isn't always the case.
    reference_flux = 1
    # the reference magnitude corresponding to the reference flux.
    reference_mag = 1
    [output.paths] # all paths relative to base, except where specified
    # if true, cleans the output base directory. ANYTHING UNDER BASE WILL BE REMOVED.
    clean_dirs = false
    # The directory names under the output directory. The structure is
    # base
    #   pgs_base
    #       pgs_raw
    #       pgs_slf
    #       pgs_lopoly
    #       pgs_data
    #   lcs_base
    #       lcs_raw
    #       lcs_sf
    #       lcs_mf
    #       lcs_data
    #   auxiliary
    base= "/pw_out"
    pgs_base = "/pgs"
    pgs_raw = "/raw" # relative to pgs_base
    pgs_slf= "/slf" # relative to pgs_base
    pgs_lopoly = "/lopoly" # relative to pgs_base
    pgs_data = "/data"
    lcs_base= "/lcs"
    lcs_raw= "/raw"
    lcs_sf= "/sf"
    lcs_mf= "/mf"
    lcs_data= "/data"
    auxiliary= "/aux"
    [output.debug]
        # prints debug messages
        print_debug_messages = false
        show_peak_selection_plots = false


[plots]
    # boolean values which set whether to save plots. Not saving the plots can save significant disc space, if that is
    # of concern. However, these are useful to visualize the process and diagnose any issues or unexpected behaviour
    save_periodogram_plots = true
    save_lightcurve_plots = true
    # labels for figures. The custom formatting here is currently WIP.
    [plots.periodograms]
        x_label = "Frequency [cycles/%input.time_unit%]"
        y_label = "Amplitude [%input.data_unit%]"
    [plots.lightcurves]
        x_label = "Time [%input.time_unit%]"
        y_label = "Flux [%input.data_unit%]"
[periodograms]
    lower_limit = "resolution"  # can be "resolution" or non-negative float
    upper_limit = 20  # can be "nyquist" or non-negative float greater than lower_limit
    # number of points per unit in frequency. If the time series is specified in days, [f] = [c/d]
    points_per_resolution_element = 20
    # sets the order of polynomial to use when fitting a polynomial to periodograms
    polyfit_order = 5

[autopw]
    peak_selection_method = "slf"  # Can be slf, highest, bin
    # dictates how to generate new light curves in the final stage of each pre-whitening iteration. "mf" subtracts the
    # multi-frequency fit from the original light curve, while "sf" subtracts the single-frequency model from the most
    # recent light curve
    new_lc_generation_method = "mf"
    # number of frequencies to extract via highest peak before using the specified
    # peak selection method. This can be useful if your light curve has some particularly strong frequencies and you're
    # trying to access the weaker ones.
    peak_selection_highest_override = 10
    # the minimum significance for peak acceptance if using slf or bin peak_selection
    peak_selection_cutoff_sig = 4.0
    # maximum number of frequencies to extract regardless of achieving the termination criterion
    cutoff_iteration = 50
    [autopw.bounds]
        # if phase fit is within 0.1 of the initial guess, adjust the initial guess
        # and try again until it isn't. This should avoid help avoid local chi squared minima in phase.
        phase_fit_rejection_criterion = 0.1
        freq_lower_coeff = 0.8  # sets lower bound on f to f_init * freq_lower_coeff
        freq_upper_coeff = 1.2  # sets upper bound on f to f_init * freq_upper_coeff
        amp_lower_coeff = 0.8 # sets lower bound on amp to amp_init * amp_lower_coeff
        amp_upper_coeff = 1.2 # sets upper bound on amp to amp_init * amp_upper_coeff
        phase_lower = -100  # lower limit on phase values
        phase_upper = 100 # upper limit on phase values

[optimization]
    optimization_pkg = "lmfit" # can be lmfit, scipy || ONLY LMFIT WORKS RIGHT NOW
    # include a constant zero point offset in multi-frequency fits
    mf_include_zp = true
    # warn user if multi-frequency fit values are within a factor of this of the boundaries. Set to 0 to disable
    mf_boundary_warnings = 0.05
    # Enables a check to see if phase significantly moved during single-frequency fit. If not, it's possible we're stuck
    # in a local minimum and we should adjust our initial guess and try again
    sf_phase_value_check = true
    # sets whether to use a sin or cos function for the sinusoidal model. Can be "sin" or "cos"
    frequency_model_type = "sin"





